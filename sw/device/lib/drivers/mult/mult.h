/*
                              *******************
******************************* C HEADER FILE *******************************
**                            *******************                          **
**                                                                         **
** project  : x-heep                                                       **
** filename : mult.h                                                       **
** date     : 23/08/2025                                                   **
**                                                                         **
*****************************************************************************
**                                                                         **
** Copyright (c) EPFL contributors.                                        **
** All rights reserved.                                                    **
**                                                                         **
*****************************************************************************
*/

/***************************************************************************/
/***************************************************************************/

/**
* @file   mult.h
* @date   23/08/2025
* @author You
* @brief  HAL of the MULT peripheral
*
*/

#ifndef _DRIVERS_MULT_H_
#define _DRIVERS_MULT_H_

/****************************************************************************/
/**                                                                        **/
/*                             MODULES USED                                **/
/**                                                                        **/
/****************************************************************************/

#include <stddef.h>
#include <stdint.h>
#include <stdbool.h>

#include "mmio.h"
#include "mult_regs.h"   // autogenerated by reggen

#ifdef __cplusplus
extern "C" {
#endif

/****************************************************************************/
/**                                                                        **/
/*                        TYPEDEFS AND STRUCTURES                          **/
/**                                                                        **/
/****************************************************************************/

/**
 * The result of a MULT operation.
 */
typedef enum mult_result {
  /**
   * Indicates success.
   */
  kMultOk = 0,
  /**
   * Indicates some unspecified failure.
   */
  kMultError = 0xFF,
} mult_result_t;

/**
 * Device handle for the MULT peripheral.
 * Wraps the memory-mapped base address.
 */
typedef struct mult {
  mmio_region_t base_addr;
} mult_t;

/****************************************************************************/
/**                                                                        **/
/*                          EXPORTED FUNCTIONS                             **/
/**                                                                        **/
/****************************************************************************/

/**
 * @brief Attends the PLIC interrupt.
 *
 * This handler is weak by default, can be overridden
 * if MULT is extended with IRQ support.
 */
__attribute__((weak, optimize("O0"))) void handler_irq_mult(uint32_t id);

/**
 * Initialize MULT peripheral handle.
 *
 * @param dev pointer to device handle
 * @param base_addr base address of the peripheral (from SoC memory map)
 */
void mult_init(mult_t *dev, uintptr_t base_addr);

/**
 * Write operand A.
 *
 * @param dev pointer to device handle
 * @param a value to write
 */
void mult_set_a(const mult_t *dev, uint32_t a);

/**
 * Write operand B.
 *
 * @param dev pointer to device handle
 * @param b value to write
 */
void mult_set_b(const mult_t *dev, uint32_t b);

/**
 * Write both operands.
 *
 * @param dev pointer to device handle
 * @param a first operand
 * @param b second operand
 */
void mult_write_operands(const mult_t *dev, uint32_t a, uint32_t b);

/**
 * Read product result (low 32 bits).
 *
 * @param dev pointer to device handle
 * @return product value
 */
uint32_t mult_get_product(const mult_t *dev);

/**
 * Blocking multiply: write operands and return product.
 *
 * @param dev pointer to device handle
 * @param a first operand
 * @param b second operand
 * @return product value
 */
uint32_t mult_mul_blocking(const mult_t *dev, uint32_t a, uint32_t b);

/**
 * Simple self-test with a few vectors.
 *
 * @param dev pointer to device handle
 * @return true if test passed, false otherwise
 */
bool mult_selftest(const mult_t *dev);

#ifdef __cplusplus
}
#endif

#endif // _DRIVERS_MULT_H_

/****************************************************************************/
/**                                                                        **/
/*                                 EOF                                     **/
/**                                                                        **/
/****************************************************************************/
