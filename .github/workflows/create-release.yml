name: Create X-HEEP Release

on:
  workflow_dispatch:
    inputs:
      llvm_version:
        description: 'LLVM version tag to build (e.g., llvmorg-19.1.4)'
        required: true
        default: 'llvmorg-19.1.4'
      gcc_version:
        description: 'GCC version tag to build (e.g., 2022.01.17)'
        required: true
        default: '2023.01.03'
      release_tag:
        description: 'Tag for the GitHub release (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: esl-epfl/x-heep-toolchain

jobs:
  build-and-release-toolchain:
    name: Build and Release X-HEEP toolchain
    runs-on: ubuntu-22.04
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            build-essential cmake ninja-build git

      - name: Clean Up Runner
        run: |
          docker rmi `docker images -q`
          sudo rm -rf /usr/share/dotnet /etc/mysql /etc/php apt/sources.list.d
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"

      - name: Set Version Number
        id: set_version
        run: |
          VERSION=${{ github.event.inputs.release_tag }}
          VERSION=${VERSION#v}
          sed -i "s/name: openhwgroup.org:systems:core-v-mini-mcu:.*/name: openhwgroup.org:systems:core-v-mini-mcu:${VERSION}/" core-v-mini-mcu.core
          sed -i "s/ARG toolchain_version=v.*/ARG toolchain_version=v${VERSION}/" util/docker/dockerfile
          git config --global user.name "actions@github.com"
          git config --global user.email "GitHub Actions"
          git commit -am "Set core-v-mini-mcu version to ${VERSION}"
          git push

      - name: Build GCC
        id: build-gcc
        run: |
          set -ex
          INSTALL_DIR=/tmp/riscv
          mkdir -p ${INSTALL_DIR}
          git clone https://github.com/riscv/riscv-gnu-toolchain /tmp/riscv-gnu-toolchain
          cd /tmp/riscv-gnu-toolchain
          git checkout ${{ github.event.inputs.gcc_version }}
          ./configure --target=riscv32-unknown-elf --prefix=${INSTALL_DIR} --with-newlib --with-abi=ilp32 --with-arch=rv32imc --with-cmodel=medlow
          make -j$(nproc)
          rm -rf /tmp/riscv-gnu-toolchain

      - name: Build LLVM/Clang
        id: build-clang
        run: |
          set -ex
          INSTALL_DIR=/tmp/riscv
          mkdir -p ${INSTALL_DIR}
          git clone https://github.com/llvm/llvm-project.git /tmp/llvm-project
          cd /tmp/llvm-project
          git checkout ${{ github.event.inputs.llvm_version }}
          mkdir build
          cd build
          cmake -G "Ninja" \
                -DLLVM_ENABLE_PROJECTS=clang \
                -DCMAKE_BUILD_TYPE=Release \
                -DCMAKE_INSTALL_PREFIX=${INSTALL_DIR} \
                -DLLVM_TARGETS_TO_BUILD="RISCV" \
                ../llvm
          cmake --build . --target install -j$(nproc)
          rm -rf /tmp/llvm-project

      - name: Package Toolchain
        id: package
        run: |
          set -ex
          INSTALL_DIR=/tmp/riscv
          TARBALL_NAME=x-heep-toolchain-${{ github.event.inputs.release_tag }}-ubuntu2204.tar.gz
          echo "TARBALL_NAME=${TARBALL_NAME}" >> $GITHUB_OUTPUT
          cd ${INSTALL_DIR}
          tar -czf /tmp/${TARBALL_NAME} .

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.event.inputs.release_tag }}
          release_name: X-HEEP ${{ github.event.inputs.release_tag }}
          body: |
            This release includes the X-HEEP code and the following components:
            - GCC toolchain, version ${{ github.event.inputs.gcc_version }}
            - LLVM/Clang toolchain, version ${{ github.event.inputs.llvm_version }}

            You can pull and use the latest Docker container integrating the above components with the following commands:
            ```bash
            cd util/docker
            make docker-pull
            make docker-run
            ```
          draft: false
          prerelease: false

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: /tmp/${{ steps.package.outputs.TARBALL_NAME }}
          asset_name: ${{ steps.package.outputs.TARBALL_NAME }}
          asset_content_type: application/gzip

  build-docker:
    runs-on: ubuntu-latest
    needs: build-and-release-toolchain
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Generate requirements.yml
        run: |
          util/python-requirements2conda.sh

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=pr
            type=raw,value=${{ github.event.inputs.release_tag }}
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' && github.event_name == 'push' }}
            type=sha,format=short

      - name: Build and push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./util/docker/dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            toolchain_version=${{ github.event.inputs.release_tag }}
            verilator_version=5.040
            verible_version=v0.0-1824-ga3b5bedf
