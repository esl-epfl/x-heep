// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Top module auto-generated by `reggen`


`include "common_cells/assertions.svh"

module serial_link_single_channel_reg_top #(
  parameter type reg_req_t = logic,
  parameter type reg_rsp_t = logic,
  parameter int AW = 6
) (
  input logic clk_i,
  input logic rst_ni,
  input  reg_req_t reg_req_i,
  output reg_rsp_t reg_rsp_o,
  // To HW
  output serial_link_single_channel_reg_pkg::serial_link_single_channel_reg2hw_t reg2hw, // Write
  input  serial_link_single_channel_reg_pkg::serial_link_single_channel_hw2reg_t hw2reg, // Read


  // Config
  input devmode_i // If 1, explicit error return for unmapped register access
);

  import serial_link_single_channel_reg_pkg::* ;

  localparam int DW = 32;
  localparam int DBW = DW/8;                    // Byte Width

  // register signals
  logic           reg_we;
  logic           reg_re;
  logic [BlockAw-1:0]  reg_addr;
  logic [DW-1:0]  reg_wdata;
  logic [DBW-1:0] reg_be;
  logic [DW-1:0]  reg_rdata;
  logic           reg_error;

  logic          addrmiss, wr_err;

  logic [DW-1:0] reg_rdata_next;

  // Below register interface can be changed
  reg_req_t  reg_intf_req;
  reg_rsp_t  reg_intf_rsp;


  assign reg_intf_req = reg_req_i;
  assign reg_rsp_o = reg_intf_rsp;


  assign reg_we = reg_intf_req.valid & reg_intf_req.write;
  assign reg_re = reg_intf_req.valid & ~reg_intf_req.write;
  assign reg_addr = reg_intf_req.addr[BlockAw-1:0];
  assign reg_wdata = reg_intf_req.wdata;
  assign reg_be = reg_intf_req.wstrb;
  assign reg_intf_rsp.rdata = reg_rdata;
  assign reg_intf_rsp.error = reg_error;
  assign reg_intf_rsp.ready = 1'b1;

  assign reg_rdata = reg_rdata_next ;
  assign reg_error = (devmode_i & addrmiss) | wr_err;


  // Define SW related signals
  // Format: <reg>_<field>_{wd|we|qs}
  //        or <reg>_{wd|we|qs} if field == 1 or 0
  logic ctrl_clk_ena_qs;
  logic ctrl_clk_ena_wd;
  logic ctrl_clk_ena_we;
  logic ctrl_reset_n_qs;
  logic ctrl_reset_n_wd;
  logic ctrl_reset_n_we;
  logic ctrl_axi_in_isolate_qs;
  logic ctrl_axi_in_isolate_wd;
  logic ctrl_axi_in_isolate_we;
  logic ctrl_axi_out_isolate_qs;
  logic ctrl_axi_out_isolate_wd;
  logic ctrl_axi_out_isolate_we;
  logic isolated_axi_in_qs;
  logic isolated_axi_in_re;
  logic isolated_axi_out_qs;
  logic isolated_axi_out_re;
  logic [10:0] tx_phy_clk_div_qs;
  logic [10:0] tx_phy_clk_div_wd;
  logic tx_phy_clk_div_we;
  logic [10:0] tx_phy_clk_start_qs;
  logic [10:0] tx_phy_clk_start_wd;
  logic tx_phy_clk_start_we;
  logic [10:0] tx_phy_clk_end_qs;
  logic [10:0] tx_phy_clk_end_wd;
  logic tx_phy_clk_end_we;
  logic raw_mode_en_wd;
  logic raw_mode_en_we;
  logic raw_mode_in_ch_sel_wd;
  logic raw_mode_in_ch_sel_we;
  logic raw_mode_in_data_valid_qs;
  logic raw_mode_in_data_valid_re;
  logic [15:0] raw_mode_in_data_qs;
  logic raw_mode_in_data_re;
  logic raw_mode_out_ch_mask_wd;
  logic raw_mode_out_ch_mask_we;
  logic [15:0] raw_mode_out_data_fifo_wd;
  logic raw_mode_out_data_fifo_we;
  logic raw_mode_out_data_fifo_ctrl_clear_wd;
  logic raw_mode_out_data_fifo_ctrl_clear_we;
  logic [2:0] raw_mode_out_data_fifo_ctrl_fill_state_qs;
  logic raw_mode_out_data_fifo_ctrl_fill_state_re;
  logic raw_mode_out_data_fifo_ctrl_is_full_qs;
  logic raw_mode_out_data_fifo_ctrl_is_full_re;
  logic raw_mode_out_en_qs;
  logic raw_mode_out_en_wd;
  logic raw_mode_out_en_we;
  logic flow_control_fifo_clear_wd;
  logic flow_control_fifo_clear_we;

  // Register instances
  // R[ctrl]: V(False)

  //   F[clk_ena]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ctrl_clk_ena (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ctrl_clk_ena_we),
    .wd     (ctrl_clk_ena_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ctrl.clk_ena.q ),

    // to register interface (read)
    .qs     (ctrl_clk_ena_qs)
  );


  //   F[reset_n]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_ctrl_reset_n (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ctrl_reset_n_we),
    .wd     (ctrl_reset_n_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ctrl.reset_n.q ),

    // to register interface (read)
    .qs     (ctrl_reset_n_qs)
  );


  //   F[axi_in_isolate]: 8:8
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_ctrl_axi_in_isolate (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ctrl_axi_in_isolate_we),
    .wd     (ctrl_axi_in_isolate_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ctrl.axi_in_isolate.q ),

    // to register interface (read)
    .qs     (ctrl_axi_in_isolate_qs)
  );


  //   F[axi_out_isolate]: 9:9
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_ctrl_axi_out_isolate (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ctrl_axi_out_isolate_we),
    .wd     (ctrl_axi_out_isolate_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ctrl.axi_out_isolate.q ),

    // to register interface (read)
    .qs     (ctrl_axi_out_isolate_qs)
  );


  // R[isolated]: V(True)

  //   F[axi_in]: 0:0
  prim_subreg_ext #(
    .DW    (1)
  ) u_isolated_axi_in (
    .re     (isolated_axi_in_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.isolated.axi_in.d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (isolated_axi_in_qs)
  );


  //   F[axi_out]: 1:1
  prim_subreg_ext #(
    .DW    (1)
  ) u_isolated_axi_out (
    .re     (isolated_axi_out_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.isolated.axi_out.d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (isolated_axi_out_qs)
  );



  // Subregister 0 of Multireg tx_phy_clk_div
  // R[tx_phy_clk_div]: V(False)

  prim_subreg #(
    .DW      (11),
    .SWACCESS("RW"),
    .RESVAL  (11'h8)
  ) u_tx_phy_clk_div (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (tx_phy_clk_div_we),
    .wd     (tx_phy_clk_div_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.tx_phy_clk_div[0].q ),

    // to register interface (read)
    .qs     (tx_phy_clk_div_qs)
  );



  // Subregister 0 of Multireg tx_phy_clk_start
  // R[tx_phy_clk_start]: V(False)

  prim_subreg #(
    .DW      (11),
    .SWACCESS("RW"),
    .RESVAL  (11'h2)
  ) u_tx_phy_clk_start (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (tx_phy_clk_start_we),
    .wd     (tx_phy_clk_start_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.tx_phy_clk_start[0].q ),

    // to register interface (read)
    .qs     (tx_phy_clk_start_qs)
  );



  // Subregister 0 of Multireg tx_phy_clk_end
  // R[tx_phy_clk_end]: V(False)

  prim_subreg #(
    .DW      (11),
    .SWACCESS("RW"),
    .RESVAL  (11'h6)
  ) u_tx_phy_clk_end (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (tx_phy_clk_end_we),
    .wd     (tx_phy_clk_end_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.tx_phy_clk_end[0].q ),

    // to register interface (read)
    .qs     (tx_phy_clk_end_qs)
  );


  // R[raw_mode_en]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("WO"),
    .RESVAL  (1'h0)
  ) u_raw_mode_en (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (raw_mode_en_we),
    .wd     (raw_mode_en_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.raw_mode_en.q ),

    .qs     ()
  );


  // R[raw_mode_in_ch_sel]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("WO"),
    .RESVAL  (1'h0)
  ) u_raw_mode_in_ch_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (raw_mode_in_ch_sel_we),
    .wd     (raw_mode_in_ch_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.raw_mode_in_ch_sel.q ),

    .qs     ()
  );


  // R[raw_mode_in_data_valid]: V(True)

  prim_subreg_ext #(
    .DW    (1)
  ) u_raw_mode_in_data_valid (
    .re     (raw_mode_in_data_valid_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.raw_mode_in_data_valid.d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (raw_mode_in_data_valid_qs)
  );


  // R[raw_mode_in_data]: V(True)

  prim_subreg_ext #(
    .DW    (16)
  ) u_raw_mode_in_data (
    .re     (raw_mode_in_data_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.raw_mode_in_data.d),
    .qre    (reg2hw.raw_mode_in_data.re),
    .qe     (),
    .q      (reg2hw.raw_mode_in_data.q ),
    .qs     (raw_mode_in_data_qs)
  );


  // R[raw_mode_out_ch_mask]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("WO"),
    .RESVAL  (1'h0)
  ) u_raw_mode_out_ch_mask (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (raw_mode_out_ch_mask_we),
    .wd     (raw_mode_out_ch_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.raw_mode_out_ch_mask.q ),

    .qs     ()
  );


  // R[raw_mode_out_data_fifo]: V(False)

  prim_subreg #(
    .DW      (16),
    .SWACCESS("WO"),
    .RESVAL  (16'h0)
  ) u_raw_mode_out_data_fifo (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (raw_mode_out_data_fifo_we),
    .wd     (raw_mode_out_data_fifo_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (reg2hw.raw_mode_out_data_fifo.qe),
    .q      (reg2hw.raw_mode_out_data_fifo.q ),

    .qs     ()
  );


  // R[raw_mode_out_data_fifo_ctrl]: V(True)

  //   F[clear]: 0:0
  prim_subreg_ext #(
    .DW    (1)
  ) u_raw_mode_out_data_fifo_ctrl_clear (
    .re     (1'b0),
    .we     (raw_mode_out_data_fifo_ctrl_clear_we),
    .wd     (raw_mode_out_data_fifo_ctrl_clear_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.raw_mode_out_data_fifo_ctrl.clear.qe),
    .q      (reg2hw.raw_mode_out_data_fifo_ctrl.clear.q ),
    .qs     ()
  );


  //   F[fill_state]: 10:8
  prim_subreg_ext #(
    .DW    (3)
  ) u_raw_mode_out_data_fifo_ctrl_fill_state (
    .re     (raw_mode_out_data_fifo_ctrl_fill_state_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.raw_mode_out_data_fifo_ctrl.fill_state.d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (raw_mode_out_data_fifo_ctrl_fill_state_qs)
  );


  //   F[is_full]: 31:31
  prim_subreg_ext #(
    .DW    (1)
  ) u_raw_mode_out_data_fifo_ctrl_is_full (
    .re     (raw_mode_out_data_fifo_ctrl_is_full_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.raw_mode_out_data_fifo_ctrl.is_full.d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (raw_mode_out_data_fifo_ctrl_is_full_qs)
  );


  // R[raw_mode_out_en]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_raw_mode_out_en (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (raw_mode_out_en_we),
    .wd     (raw_mode_out_en_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.raw_mode_out_en.q ),

    // to register interface (read)
    .qs     (raw_mode_out_en_qs)
  );


  // R[flow_control_fifo_clear]: V(True)

  prim_subreg_ext #(
    .DW    (1)
  ) u_flow_control_fifo_clear (
    .re     (1'b0),
    .we     (flow_control_fifo_clear_we),
    .wd     (flow_control_fifo_clear_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.flow_control_fifo_clear.qe),
    .q      (reg2hw.flow_control_fifo_clear.q ),
    .qs     ()
  );




  logic [13:0] addr_hit;
  always_comb begin
    addr_hit = '0;
    addr_hit[ 0] = (reg_addr == SERIAL_LINK_SINGLE_CHANNEL_CTRL_OFFSET);
    addr_hit[ 1] = (reg_addr == SERIAL_LINK_SINGLE_CHANNEL_ISOLATED_OFFSET);
    addr_hit[ 2] = (reg_addr == SERIAL_LINK_SINGLE_CHANNEL_TX_PHY_CLK_DIV_OFFSET);
    addr_hit[ 3] = (reg_addr == SERIAL_LINK_SINGLE_CHANNEL_TX_PHY_CLK_START_OFFSET);
    addr_hit[ 4] = (reg_addr == SERIAL_LINK_SINGLE_CHANNEL_TX_PHY_CLK_END_OFFSET);
    addr_hit[ 5] = (reg_addr == SERIAL_LINK_SINGLE_CHANNEL_RAW_MODE_EN_OFFSET);
    addr_hit[ 6] = (reg_addr == SERIAL_LINK_SINGLE_CHANNEL_RAW_MODE_IN_CH_SEL_OFFSET);
    addr_hit[ 7] = (reg_addr == SERIAL_LINK_SINGLE_CHANNEL_RAW_MODE_IN_DATA_VALID_OFFSET);
    addr_hit[ 8] = (reg_addr == SERIAL_LINK_SINGLE_CHANNEL_RAW_MODE_IN_DATA_OFFSET);
    addr_hit[ 9] = (reg_addr == SERIAL_LINK_SINGLE_CHANNEL_RAW_MODE_OUT_CH_MASK_OFFSET);
    addr_hit[10] = (reg_addr == SERIAL_LINK_SINGLE_CHANNEL_RAW_MODE_OUT_DATA_FIFO_OFFSET);
    addr_hit[11] = (reg_addr == SERIAL_LINK_SINGLE_CHANNEL_RAW_MODE_OUT_DATA_FIFO_CTRL_OFFSET);
    addr_hit[12] = (reg_addr == SERIAL_LINK_SINGLE_CHANNEL_RAW_MODE_OUT_EN_OFFSET);
    addr_hit[13] = (reg_addr == SERIAL_LINK_SINGLE_CHANNEL_FLOW_CONTROL_FIFO_CLEAR_OFFSET);
  end

  assign addrmiss = (reg_re || reg_we) ? ~|addr_hit : 1'b0 ;

  // Check sub-word write is permitted
  always_comb begin
    wr_err = (reg_we &
              ((addr_hit[ 0] & (|(SERIAL_LINK_SINGLE_CHANNEL_PERMIT[ 0] & ~reg_be))) |
               (addr_hit[ 1] & (|(SERIAL_LINK_SINGLE_CHANNEL_PERMIT[ 1] & ~reg_be))) |
               (addr_hit[ 2] & (|(SERIAL_LINK_SINGLE_CHANNEL_PERMIT[ 2] & ~reg_be))) |
               (addr_hit[ 3] & (|(SERIAL_LINK_SINGLE_CHANNEL_PERMIT[ 3] & ~reg_be))) |
               (addr_hit[ 4] & (|(SERIAL_LINK_SINGLE_CHANNEL_PERMIT[ 4] & ~reg_be))) |
               (addr_hit[ 5] & (|(SERIAL_LINK_SINGLE_CHANNEL_PERMIT[ 5] & ~reg_be))) |
               (addr_hit[ 6] & (|(SERIAL_LINK_SINGLE_CHANNEL_PERMIT[ 6] & ~reg_be))) |
               (addr_hit[ 7] & (|(SERIAL_LINK_SINGLE_CHANNEL_PERMIT[ 7] & ~reg_be))) |
               (addr_hit[ 8] & (|(SERIAL_LINK_SINGLE_CHANNEL_PERMIT[ 8] & ~reg_be))) |
               (addr_hit[ 9] & (|(SERIAL_LINK_SINGLE_CHANNEL_PERMIT[ 9] & ~reg_be))) |
               (addr_hit[10] & (|(SERIAL_LINK_SINGLE_CHANNEL_PERMIT[10] & ~reg_be))) |
               (addr_hit[11] & (|(SERIAL_LINK_SINGLE_CHANNEL_PERMIT[11] & ~reg_be))) |
               (addr_hit[12] & (|(SERIAL_LINK_SINGLE_CHANNEL_PERMIT[12] & ~reg_be))) |
               (addr_hit[13] & (|(SERIAL_LINK_SINGLE_CHANNEL_PERMIT[13] & ~reg_be)))));
  end

  assign ctrl_clk_ena_we = addr_hit[0] & reg_we & !reg_error;
  assign ctrl_clk_ena_wd = reg_wdata[0];

  assign ctrl_reset_n_we = addr_hit[0] & reg_we & !reg_error;
  assign ctrl_reset_n_wd = reg_wdata[1];

  assign ctrl_axi_in_isolate_we = addr_hit[0] & reg_we & !reg_error;
  assign ctrl_axi_in_isolate_wd = reg_wdata[8];

  assign ctrl_axi_out_isolate_we = addr_hit[0] & reg_we & !reg_error;
  assign ctrl_axi_out_isolate_wd = reg_wdata[9];

  assign isolated_axi_in_re = addr_hit[1] & reg_re & !reg_error;

  assign isolated_axi_out_re = addr_hit[1] & reg_re & !reg_error;

  assign tx_phy_clk_div_we = addr_hit[2] & reg_we & !reg_error;
  assign tx_phy_clk_div_wd = reg_wdata[10:0];

  assign tx_phy_clk_start_we = addr_hit[3] & reg_we & !reg_error;
  assign tx_phy_clk_start_wd = reg_wdata[10:0];

  assign tx_phy_clk_end_we = addr_hit[4] & reg_we & !reg_error;
  assign tx_phy_clk_end_wd = reg_wdata[10:0];

  assign raw_mode_en_we = addr_hit[5] & reg_we & !reg_error;
  assign raw_mode_en_wd = reg_wdata[0];

  assign raw_mode_in_ch_sel_we = addr_hit[6] & reg_we & !reg_error;
  assign raw_mode_in_ch_sel_wd = reg_wdata[0];

  assign raw_mode_in_data_valid_re = addr_hit[7] & reg_re & !reg_error;

  assign raw_mode_in_data_re = addr_hit[8] & reg_re & !reg_error;

  assign raw_mode_out_ch_mask_we = addr_hit[9] & reg_we & !reg_error;
  assign raw_mode_out_ch_mask_wd = reg_wdata[0];

  assign raw_mode_out_data_fifo_we = addr_hit[10] & reg_we & !reg_error;
  assign raw_mode_out_data_fifo_wd = reg_wdata[15:0];

  assign raw_mode_out_data_fifo_ctrl_clear_we = addr_hit[11] & reg_we & !reg_error;
  assign raw_mode_out_data_fifo_ctrl_clear_wd = reg_wdata[0];

  assign raw_mode_out_data_fifo_ctrl_fill_state_re = addr_hit[11] & reg_re & !reg_error;

  assign raw_mode_out_data_fifo_ctrl_is_full_re = addr_hit[11] & reg_re & !reg_error;

  assign raw_mode_out_en_we = addr_hit[12] & reg_we & !reg_error;
  assign raw_mode_out_en_wd = reg_wdata[0];

  assign flow_control_fifo_clear_we = addr_hit[13] & reg_we & !reg_error;
  assign flow_control_fifo_clear_wd = reg_wdata[0];

  // Read data return
  always_comb begin
    reg_rdata_next = '0;
    unique case (1'b1)
      addr_hit[0]: begin
        reg_rdata_next[0] = ctrl_clk_ena_qs;
        reg_rdata_next[1] = ctrl_reset_n_qs;
        reg_rdata_next[8] = ctrl_axi_in_isolate_qs;
        reg_rdata_next[9] = ctrl_axi_out_isolate_qs;
      end

      addr_hit[1]: begin
        reg_rdata_next[0] = isolated_axi_in_qs;
        reg_rdata_next[1] = isolated_axi_out_qs;
      end

      addr_hit[2]: begin
        reg_rdata_next[10:0] = tx_phy_clk_div_qs;
      end

      addr_hit[3]: begin
        reg_rdata_next[10:0] = tx_phy_clk_start_qs;
      end

      addr_hit[4]: begin
        reg_rdata_next[10:0] = tx_phy_clk_end_qs;
      end

      addr_hit[5]: begin
        reg_rdata_next[0] = '0;
      end

      addr_hit[6]: begin
        reg_rdata_next[0] = '0;
      end

      addr_hit[7]: begin
        reg_rdata_next[0] = raw_mode_in_data_valid_qs;
      end

      addr_hit[8]: begin
        reg_rdata_next[15:0] = raw_mode_in_data_qs;
      end

      addr_hit[9]: begin
        reg_rdata_next[0] = '0;
      end

      addr_hit[10]: begin
        reg_rdata_next[15:0] = '0;
      end

      addr_hit[11]: begin
        reg_rdata_next[0] = '0;
        reg_rdata_next[10:8] = raw_mode_out_data_fifo_ctrl_fill_state_qs;
        reg_rdata_next[31] = raw_mode_out_data_fifo_ctrl_is_full_qs;
      end

      addr_hit[12]: begin
        reg_rdata_next[0] = raw_mode_out_en_qs;
      end

      addr_hit[13]: begin
        reg_rdata_next[0] = '0;
      end

      default: begin
        reg_rdata_next = '1;
      end
    endcase
  end

  // Unused signal tieoff

  // wdata / byte enable are not always fully used
  // add a blanket unused statement to handle lint waivers
  logic unused_wdata;
  logic unused_be;
  assign unused_wdata = ^reg_wdata;
  assign unused_be = ^reg_be;

  // Assertions for Register Interface
  `ASSERT(en2addrHit, (reg_we || reg_re) |-> $onehot0(addr_hit))

endmodule

module serial_link_single_channel_reg_top_intf
#(
  parameter int AW = 6,
  localparam int DW = 32
) (
  input logic clk_i,
  input logic rst_ni,
  REG_BUS.in  regbus_slave,
  // To HW
  output serial_link_single_channel_reg_pkg::serial_link_single_channel_reg2hw_t reg2hw, // Write
  input  serial_link_single_channel_reg_pkg::serial_link_single_channel_hw2reg_t hw2reg, // Read
  // Config
  input devmode_i // If 1, explicit error return for unmapped register access
);
 localparam int unsigned STRB_WIDTH = DW/8;

`include "register_interface/typedef.svh"
`include "register_interface/assign.svh"

  // Define structs for reg_bus
  typedef logic [AW-1:0] addr_t;
  typedef logic [DW-1:0] data_t;
  typedef logic [STRB_WIDTH-1:0] strb_t;
  `REG_BUS_TYPEDEF_ALL(reg_bus, addr_t, data_t, strb_t)

  reg_bus_req_t s_reg_req;
  reg_bus_rsp_t s_reg_rsp;
  
  // Assign SV interface to structs
  `REG_BUS_ASSIGN_TO_REQ(s_reg_req, regbus_slave)
  `REG_BUS_ASSIGN_FROM_RSP(regbus_slave, s_reg_rsp)

  

  serial_link_single_channel_reg_top #(
    .reg_req_t(reg_bus_req_t),
    .reg_rsp_t(reg_bus_rsp_t),
    .AW(AW)
  ) i_regs (
    .clk_i,
    .rst_ni,
    .reg_req_i(s_reg_req),
    .reg_rsp_o(s_reg_rsp),
    .reg2hw, // Write
    .hw2reg, // Read
    .devmode_i
  );
  
endmodule


