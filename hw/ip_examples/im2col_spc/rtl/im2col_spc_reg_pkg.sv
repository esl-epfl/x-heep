// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Package auto-generated by `reggen` containing data structure

package im2col_spc_reg_pkg;

  // Address widths within the block
  parameter int BlockAw = 7;

  ////////////////////////////
  // Typedefs for registers //
  ////////////////////////////

  typedef struct packed {logic [31:0] q;} im2col_spc_reg2hw_src_ptr_reg_t;

  typedef struct packed {logic [31:0] q;} im2col_spc_reg2hw_dst_ptr_reg_t;

  typedef struct packed {logic [15:0] q;} im2col_spc_reg2hw_iw_reg_t;

  typedef struct packed {logic [15:0] q;} im2col_spc_reg2hw_ih_reg_t;

  typedef struct packed {logic [7:0] q;} im2col_spc_reg2hw_fw_reg_t;

  typedef struct packed {logic [7:0] q;} im2col_spc_reg2hw_fh_reg_t;

  typedef struct packed {logic [7:0] q;} im2col_spc_reg2hw_batch_reg_t;

  typedef struct packed {
    logic [7:0] q;
    logic       qe;
  } im2col_spc_reg2hw_num_ch_reg_t;

  typedef struct packed {logic [15:0] q;} im2col_spc_reg2hw_ch_col_reg_t;

  typedef struct packed {logic [15:0] q;} im2col_spc_reg2hw_n_patches_w_reg_t;

  typedef struct packed {logic [15:0] q;} im2col_spc_reg2hw_n_patches_h_reg_t;

  typedef struct packed {logic [7:0] q;} im2col_spc_reg2hw_last_patch_h_reg_t;

  typedef struct packed {logic [7:0] q;} im2col_spc_reg2hw_last_patch_w_reg_t;

  typedef struct packed {logic [3:0] q;} im2col_spc_reg2hw_log_strides_d1_reg_t;

  typedef struct packed {logic [3:0] q;} im2col_spc_reg2hw_log_strides_d2_reg_t;

  typedef struct packed {
    logic q;
    logic re;
  } im2col_spc_reg2hw_status_reg_t;

  typedef struct packed {
    struct packed {logic [15:0] q;} rx_trigger_slot;
    struct packed {logic [15:0] q;} tx_trigger_slot;
  } im2col_spc_reg2hw_slot_reg_t;

  typedef struct packed {logic [1:0] q;} im2col_spc_reg2hw_data_type_reg_t;

  typedef struct packed {
    logic [5:0] q;
    logic       qe;
  } im2col_spc_reg2hw_pad_top_reg_t;

  typedef struct packed {
    logic [5:0] q;
    logic       qe;
  } im2col_spc_reg2hw_pad_bottom_reg_t;

  typedef struct packed {
    logic [5:0] q;
    logic       qe;
  } im2col_spc_reg2hw_pad_right_reg_t;

  typedef struct packed {
    logic [5:0] q;
    logic       qe;
  } im2col_spc_reg2hw_pad_left_reg_t;

  typedef struct packed {logic q;} im2col_spc_reg2hw_interrupt_en_reg_t;

  typedef struct packed {
    logic q;
    logic re;
  } im2col_spc_reg2hw_spc_ifr_reg_t;

  typedef struct packed {logic [31:0] q;} im2col_spc_reg2hw_spc_ch_mask_reg_t;

  typedef struct packed {logic [31:0] q;} im2col_spc_reg2hw_spc_ch_offset_reg_t;

  typedef struct packed {logic d;} im2col_spc_hw2reg_status_reg_t;

  typedef struct packed {logic d;} im2col_spc_hw2reg_spc_ifr_reg_t;

  // Register -> HW type
  typedef struct packed {
    im2col_spc_reg2hw_src_ptr_reg_t src_ptr;  // [331:300]
    im2col_spc_reg2hw_dst_ptr_reg_t dst_ptr;  // [299:268]
    im2col_spc_reg2hw_iw_reg_t iw;  // [267:252]
    im2col_spc_reg2hw_ih_reg_t ih;  // [251:236]
    im2col_spc_reg2hw_fw_reg_t fw;  // [235:228]
    im2col_spc_reg2hw_fh_reg_t fh;  // [227:220]
    im2col_spc_reg2hw_batch_reg_t batch;  // [219:212]
    im2col_spc_reg2hw_num_ch_reg_t num_ch;  // [211:203]
    im2col_spc_reg2hw_ch_col_reg_t ch_col;  // [202:187]
    im2col_spc_reg2hw_n_patches_w_reg_t n_patches_w;  // [186:171]
    im2col_spc_reg2hw_n_patches_h_reg_t n_patches_h;  // [170:155]
    im2col_spc_reg2hw_last_patch_h_reg_t last_patch_h;  // [154:147]
    im2col_spc_reg2hw_last_patch_w_reg_t last_patch_w;  // [146:139]
    im2col_spc_reg2hw_log_strides_d1_reg_t log_strides_d1;  // [138:135]
    im2col_spc_reg2hw_log_strides_d2_reg_t log_strides_d2;  // [134:131]
    im2col_spc_reg2hw_status_reg_t status;  // [130:129]
    im2col_spc_reg2hw_slot_reg_t slot;  // [128:97]
    im2col_spc_reg2hw_data_type_reg_t data_type;  // [96:95]
    im2col_spc_reg2hw_pad_top_reg_t pad_top;  // [94:88]
    im2col_spc_reg2hw_pad_bottom_reg_t pad_bottom;  // [87:81]
    im2col_spc_reg2hw_pad_right_reg_t pad_right;  // [80:74]
    im2col_spc_reg2hw_pad_left_reg_t pad_left;  // [73:67]
    im2col_spc_reg2hw_interrupt_en_reg_t interrupt_en;  // [66:66]
    im2col_spc_reg2hw_spc_ifr_reg_t spc_ifr;  // [65:64]
    im2col_spc_reg2hw_spc_ch_mask_reg_t spc_ch_mask;  // [63:32]
    im2col_spc_reg2hw_spc_ch_offset_reg_t spc_ch_offset;  // [31:0]
  } im2col_spc_reg2hw_t;

  // HW -> register type
  typedef struct packed {
    im2col_spc_hw2reg_status_reg_t  status;   // [1:1]
    im2col_spc_hw2reg_spc_ifr_reg_t spc_ifr;  // [0:0]
  } im2col_spc_hw2reg_t;

  // Register offsets
  parameter logic [BlockAw-1:0] IM2COL_SPC_SRC_PTR_OFFSET = 7'h0;
  parameter logic [BlockAw-1:0] IM2COL_SPC_DST_PTR_OFFSET = 7'h4;
  parameter logic [BlockAw-1:0] IM2COL_SPC_IW_OFFSET = 7'h8;
  parameter logic [BlockAw-1:0] IM2COL_SPC_IH_OFFSET = 7'hc;
  parameter logic [BlockAw-1:0] IM2COL_SPC_FW_OFFSET = 7'h10;
  parameter logic [BlockAw-1:0] IM2COL_SPC_FH_OFFSET = 7'h14;
  parameter logic [BlockAw-1:0] IM2COL_SPC_BATCH_OFFSET = 7'h18;
  parameter logic [BlockAw-1:0] IM2COL_SPC_NUM_CH_OFFSET = 7'h1c;
  parameter logic [BlockAw-1:0] IM2COL_SPC_CH_COL_OFFSET = 7'h20;
  parameter logic [BlockAw-1:0] IM2COL_SPC_N_PATCHES_W_OFFSET = 7'h24;
  parameter logic [BlockAw-1:0] IM2COL_SPC_N_PATCHES_H_OFFSET = 7'h28;
  parameter logic [BlockAw-1:0] IM2COL_SPC_LAST_PATCH_H_OFFSET = 7'h2c;
  parameter logic [BlockAw-1:0] IM2COL_SPC_LAST_PATCH_W_OFFSET = 7'h30;
  parameter logic [BlockAw-1:0] IM2COL_SPC_LOG_STRIDES_D1_OFFSET = 7'h34;
  parameter logic [BlockAw-1:0] IM2COL_SPC_LOG_STRIDES_D2_OFFSET = 7'h38;
  parameter logic [BlockAw-1:0] IM2COL_SPC_STATUS_OFFSET = 7'h3c;
  parameter logic [BlockAw-1:0] IM2COL_SPC_SLOT_OFFSET = 7'h40;
  parameter logic [BlockAw-1:0] IM2COL_SPC_DATA_TYPE_OFFSET = 7'h44;
  parameter logic [BlockAw-1:0] IM2COL_SPC_PAD_TOP_OFFSET = 7'h48;
  parameter logic [BlockAw-1:0] IM2COL_SPC_PAD_BOTTOM_OFFSET = 7'h4c;
  parameter logic [BlockAw-1:0] IM2COL_SPC_PAD_RIGHT_OFFSET = 7'h50;
  parameter logic [BlockAw-1:0] IM2COL_SPC_PAD_LEFT_OFFSET = 7'h54;
  parameter logic [BlockAw-1:0] IM2COL_SPC_INTERRUPT_EN_OFFSET = 7'h58;
  parameter logic [BlockAw-1:0] IM2COL_SPC_SPC_IFR_OFFSET = 7'h5c;
  parameter logic [BlockAw-1:0] IM2COL_SPC_SPC_CH_MASK_OFFSET = 7'h60;
  parameter logic [BlockAw-1:0] IM2COL_SPC_SPC_CH_OFFSET_OFFSET = 7'h64;

  // Reset values for hwext registers and their fields
  parameter logic [0:0] IM2COL_SPC_STATUS_RESVAL = 1'h1;
  parameter logic [0:0] IM2COL_SPC_STATUS_READY_RESVAL = 1'h1;
  parameter logic [0:0] IM2COL_SPC_SPC_IFR_RESVAL = 1'h0;
  parameter logic [0:0] IM2COL_SPC_SPC_IFR_FLAG_RESVAL = 1'h0;

  // Register index
  typedef enum int {
    IM2COL_SPC_SRC_PTR,
    IM2COL_SPC_DST_PTR,
    IM2COL_SPC_IW,
    IM2COL_SPC_IH,
    IM2COL_SPC_FW,
    IM2COL_SPC_FH,
    IM2COL_SPC_BATCH,
    IM2COL_SPC_NUM_CH,
    IM2COL_SPC_CH_COL,
    IM2COL_SPC_N_PATCHES_W,
    IM2COL_SPC_N_PATCHES_H,
    IM2COL_SPC_LAST_PATCH_H,
    IM2COL_SPC_LAST_PATCH_W,
    IM2COL_SPC_LOG_STRIDES_D1,
    IM2COL_SPC_LOG_STRIDES_D2,
    IM2COL_SPC_STATUS,
    IM2COL_SPC_SLOT,
    IM2COL_SPC_DATA_TYPE,
    IM2COL_SPC_PAD_TOP,
    IM2COL_SPC_PAD_BOTTOM,
    IM2COL_SPC_PAD_RIGHT,
    IM2COL_SPC_PAD_LEFT,
    IM2COL_SPC_INTERRUPT_EN,
    IM2COL_SPC_SPC_IFR,
    IM2COL_SPC_SPC_CH_MASK,
    IM2COL_SPC_SPC_CH_OFFSET
  } im2col_spc_id_e;

  // Register width information to check illegal writes
  parameter logic [3:0] IM2COL_SPC_PERMIT[26] = '{
      4'b1111,  // index[ 0] IM2COL_SPC_SRC_PTR
      4'b1111,  // index[ 1] IM2COL_SPC_DST_PTR
      4'b0011,  // index[ 2] IM2COL_SPC_IW
      4'b0011,  // index[ 3] IM2COL_SPC_IH
      4'b0001,  // index[ 4] IM2COL_SPC_FW
      4'b0001,  // index[ 5] IM2COL_SPC_FH
      4'b0001,  // index[ 6] IM2COL_SPC_BATCH
      4'b0001,  // index[ 7] IM2COL_SPC_NUM_CH
      4'b0011,  // index[ 8] IM2COL_SPC_CH_COL
      4'b0011,  // index[ 9] IM2COL_SPC_N_PATCHES_W
      4'b0011,  // index[10] IM2COL_SPC_N_PATCHES_H
      4'b0001,  // index[11] IM2COL_SPC_LAST_PATCH_H
      4'b0001,  // index[12] IM2COL_SPC_LAST_PATCH_W
      4'b0001,  // index[13] IM2COL_SPC_LOG_STRIDES_D1
      4'b0001,  // index[14] IM2COL_SPC_LOG_STRIDES_D2
      4'b0001,  // index[15] IM2COL_SPC_STATUS
      4'b1111,  // index[16] IM2COL_SPC_SLOT
      4'b0001,  // index[17] IM2COL_SPC_DATA_TYPE
      4'b0001,  // index[18] IM2COL_SPC_PAD_TOP
      4'b0001,  // index[19] IM2COL_SPC_PAD_BOTTOM
      4'b0001,  // index[20] IM2COL_SPC_PAD_RIGHT
      4'b0001,  // index[21] IM2COL_SPC_PAD_LEFT
      4'b0001,  // index[22] IM2COL_SPC_INTERRUPT_EN
      4'b0001,  // index[23] IM2COL_SPC_SPC_IFR
      4'b1111,  // index[24] IM2COL_SPC_SPC_CH_MASK
      4'b1111  // index[25] IM2COL_SPC_SPC_CH_OFFSET
  };

endpackage

