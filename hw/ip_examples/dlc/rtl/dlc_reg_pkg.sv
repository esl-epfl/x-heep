// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Package auto-generated by `reggen` containing data structure

package dlc_reg_pkg;

  // Address widths within the block
  parameter int BlockAw = 6;

  ////////////////////////////
  // Typedefs for registers //
  ////////////////////////////

  typedef struct packed {logic [3:0] q;} dlc_reg2hw_dlvl_log_level_width_reg_t;

  typedef struct packed {logic [3:0] q;} dlc_reg2hw_dlvl_n_bits_reg_t;

  typedef struct packed {logic [15:0] q;} dlc_reg2hw_dlvl_mask_reg_t;

  typedef struct packed {logic q;} dlc_reg2hw_dlvl_format_reg_t;

  typedef struct packed {logic [15:0] q;} dlc_reg2hw_dt_mask_reg_t;

  typedef struct packed {logic q;} dlc_reg2hw_readnotwrite_reg_t;

  typedef struct packed {logic q;} dlc_reg2hw_bypass_reg_t;

  typedef struct packed {logic q;} dlc_reg2hw_interrupt_en_reg_t;

  typedef struct packed {
    logic q;
    logic re;
  } dlc_reg2hw_xing_intr_reg_t;

  typedef struct packed {logic d;} dlc_hw2reg_xing_intr_reg_t;

  // Register -> HW type
  typedef struct packed {
    dlc_reg2hw_dlvl_log_level_width_reg_t dlvl_log_level_width;  // [45:42]
    dlc_reg2hw_dlvl_n_bits_reg_t dlvl_n_bits;  // [41:38]
    dlc_reg2hw_dlvl_mask_reg_t dlvl_mask;  // [37:22]
    dlc_reg2hw_dlvl_format_reg_t dlvl_format;  // [21:21]
    dlc_reg2hw_dt_mask_reg_t dt_mask;  // [20:5]
    dlc_reg2hw_readnotwrite_reg_t readnotwrite;  // [4:4]
    dlc_reg2hw_bypass_reg_t bypass;  // [3:3]
    dlc_reg2hw_interrupt_en_reg_t interrupt_en;  // [2:2]
    dlc_reg2hw_xing_intr_reg_t xing_intr;  // [1:0]
  } dlc_reg2hw_t;

  // HW -> register type
  typedef struct packed {
    dlc_hw2reg_xing_intr_reg_t xing_intr;  // [0:0]
  } dlc_hw2reg_t;

  // Register offsets
  parameter logic [BlockAw-1:0] DLC_DLVL_LOG_LEVEL_WIDTH_OFFSET = 6'h0;
  parameter logic [BlockAw-1:0] DLC_DLVL_N_BITS_OFFSET = 6'h4;
  parameter logic [BlockAw-1:0] DLC_DLVL_MASK_OFFSET = 6'h8;
  parameter logic [BlockAw-1:0] DLC_DLVL_FORMAT_OFFSET = 6'hc;
  parameter logic [BlockAw-1:0] DLC_DT_MASK_OFFSET = 6'h10;
  parameter logic [BlockAw-1:0] DLC_READNOTWRITE_OFFSET = 6'h14;
  parameter logic [BlockAw-1:0] DLC_BYPASS_OFFSET = 6'h18;
  parameter logic [BlockAw-1:0] DLC_INTERRUPT_EN_OFFSET = 6'h1c;
  parameter logic [BlockAw-1:0] DLC_XING_INTR_OFFSET = 6'h20;

  // Reset values for hwext registers and their fields
  parameter logic [0:0] DLC_XING_INTR_RESVAL = 1'h0;

  // Register index
  typedef enum int {
    DLC_DLVL_LOG_LEVEL_WIDTH,
    DLC_DLVL_N_BITS,
    DLC_DLVL_MASK,
    DLC_DLVL_FORMAT,
    DLC_DT_MASK,
    DLC_READNOTWRITE,
    DLC_BYPASS,
    DLC_INTERRUPT_EN,
    DLC_XING_INTR
  } dlc_id_e;

  // Register width information to check illegal writes
  parameter logic [3:0] DLC_PERMIT[9] = '{
      4'b0001,  // index[0] DLC_DLVL_LOG_LEVEL_WIDTH
      4'b0001,  // index[1] DLC_DLVL_N_BITS
      4'b0011,  // index[2] DLC_DLVL_MASK
      4'b0001,  // index[3] DLC_DLVL_FORMAT
      4'b0011,  // index[4] DLC_DT_MASK
      4'b0001,  // index[5] DLC_READNOTWRITE
      4'b0001,  // index[6] DLC_BYPASS
      4'b0001,  // index[7] DLC_INTERRUPT_EN
      4'b0001  // index[8] DLC_XING_INTR
  };

endpackage

